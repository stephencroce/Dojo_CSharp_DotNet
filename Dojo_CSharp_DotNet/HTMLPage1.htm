<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>Untitled Page</title>
</head>
<script language="javascript">
function hithere()
{
    window.alert('hithere');
}
</script>
<body>
    <table style="width: 100%;">
        <tr>
            <td colspan="3">
                <a href="#" onmouseOver="hithere();">hi there</a>
            </td>
        </tr>
        <tr>
            <td>
                &nbsp;
                test
            </td>
            <td>
                &nbsp;
                test
            </td>
            <td>
                &nbsp;
                test
            </td>
        </tr>
        <tr>
            <td>
                &nbsp;
                test
            </td>
            <td>
                &nbsp;
                test
            </td>
            <td>
                &nbsp;
                test
            </td>
        </tr>
        <tr>
            <td>
                &nbsp;
                test
            </td>
            <td>
                &nbsp;
                test
            </td>
            <td>
                &nbsp;
                test
            </td>
        </tr>
    </table>
    <script>
        var swapPairs = function swapPairs(head) {

            //https://www.phpied.com/3-ways-to-define-a-javascript-class/
            function ListNode(val) {
                this.val = val;
                this.next = null;
            }
            function getSwapped(ll) {
                var swapped = [];
                var llToArray = function (ll) {

                    if (ll != null) {
                        swapped.push(ll.val);
                        llToArray(ll.next);
                    }
                    return swapped.join();
                }
            }
            var linkedListRecursive = function (inputArray, linkedList, counter) {
                if (typeof (linkedList) === "undefined") {
                    counter = 0;
                    linkedList = new ListNode(inputArray[counter]);
                    counter++; //(1)
                    linkedList.next = new ListNode(inputArray[counter]);
                }
                if (counter <= inputArray.length - 1) {
                    linkedList.next = new ListNode(inputArray[counter]);
                    counter++;
                    linkedListRecursive(inputArray, linkedList.next, counter);
                }
                return linkedList;
            };
            var swapPairs = function (linkedList) {

                //Setup Example
                //var theInput = [1, 2, 3, 4];
                //var theInput2 = [1, 2, 3, 4, 5, 6];

                //Desired Output Example:
                //var theOutPut = [2, 1, 4, 3]
                //var theOutPut2 = [2, 1, 4, 3, 6, 5]
                //You may not modify the values in the list's nodes, only nodes itself may be changed.

                var temp = linkedList;

                /* Traverse only till there are atleast 2 nodes left */
                if (temp != null && temp.next != null) {

                    /* Swap the data */
                    var k = temp.val;
                    temp.val = temp.next.val;
                    temp.next.val = k;
                    temp = temp.next.next;
                    swapPairs(temp);
                }
                return getSwapped(linkedList);
                //console.log(linkedList);
            };

            var swapped = [];
            var llToArray = function (ll) {

                if (ll != null) {
                    swapped.push(ll.val);
                    llToArray(ll.next);
                }
                return swapped.join();
            }
            var theLinkedList = linkedListRecursive(theInput);
            swapPairs(theLinkedList);
            llToArray(theLinkedList);
            return swapped;
        }
        var theInput = [1, 2, 3, 4];
        console.log(theInput);
        console.log(swapPairs(theInput));
 </script>   
<script>
//https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052
//http://www.javascripttutorial.net/javascript-recursive-function/
    //Function Expression VS. Function Statement    the below is a "Function Expression"  The other way function myFunc(){} is a "Function Statement"     
    //Function declarations load before any code is executed while Function expressions load only when the interpreter reaches that line of code.
    //Similar to the var statement, function declarations are HOISTED to the top of other code.  Function expressions aren’t HOISTED, which allows them to retain a copy of the 
    //local variables from the scope where they were defined.

    var factorial = function pf(n) {
        if (n <= 1) {
            return 1;
        } else {
            return n * pf(n - 1);
        }
    };
    console.log(factorial(5));
    console.log(factorial(4));
    console.log(factorial(3));
</script>
<script id="leetCodeSpecific">
    /**
     * Definition for singly-linked list.
     * function ListNode(val) {
     *     this.val = val;
     *     this.next = null;
     * }
     */
    /**
     * @param {ListNode} head
     * @return {ListNode}
     */
    //its just as simple as this.......
    var swapPairs = function (head) {

        var temp = head;

        /* Traverse only till there are atleast 2 nodes left */
        if (temp != null && temp.next != null) {

            /* Swap the data */
            var k = temp.val;
            temp.val = temp.next.val;
            temp.next.val = k;
            temp = temp.next.next;
            swapPairs(temp);
        }
        return head;
    };
</script>
</body>
</html>
